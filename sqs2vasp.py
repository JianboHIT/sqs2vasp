#!/usr/bin/env python3
# Convert bestsqs.out generated by mcsqs (ATAT) to POSCAR file (POSCAR.sqs) for VASP
#
#     python3 sqs2vasp.py [ sqsfile (default: bestsqs.out) ]
# 
# (POSCAR.sqs will be generated)


import sys
import numpy as np


file_str = sys.argv[1] if len(sys.argv) > 1 else 'bestsqs.out'
file_pos = 'POSCAR.sqs'

with open(file_str, 'r') as f:
    datas = f.readlines()

coor = []
for i in range(3):
    line = datas[i].strip().split()
    coor.append([float(x) for x in line])

basic = []
for i in range(3,6):
    line = datas[i].strip().split()
    basic.append([float(x) for x in line])

basic = np.array(basic) @ np.array(coor)

xyzs = []
elmts = []
for line in datas[6:]:
    *xyz, label = line.strip().split()
    xyz = np.array([float(ix) for ix in xyz]) @ np.array(coor)
    if label in elmts:
        index = elmts.index(label)
        xyzs[index].append(xyz)
    else:
        elmts.append(label)
        xyzs.append([xyz,])

with open(file_pos, 'w') as f:
    header = 'Generated by sqs2vasp.py'
    f.write(header + '\n')
    f.write('  1.000000\n')
    for ib in basic:
        line = '  {:>22.16f}{:>22.16f}{:>22.16f}\n'.format(*ib)
        f.write(line)
    dsp = '{:>5s}'*len(elmts) + '\n'
    f.write(dsp.format(*elmts))
    dsp = '  ' + '{:>5d}'*len(elmts) + '\n'
    f.write(dsp.format(*[len(x) for x in xyzs]))
    f.write('Cartesian\n')
    dsp = '  {:>22.16f}{:>22.16f}{:>22.16f}    {:s}\n'
    for ielmt, ixyzs in zip(elmts, xyzs):
        for idx, ixyz in enumerate(ixyzs, start=1):
            f.write(dsp.format(*ixyz, ielmt+str(idx)))
